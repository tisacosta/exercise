package com.jumia.followupExercise.utilities;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

import com.jumia.followupExercise.model.Item;
import com.jumia.followupExercise.model.Order;
import com.jumia.followupExercise.model.Product;
import com.jumia.followupExercise.runner.Runner;

/**
 * This class generates random data to be used to execute the program.
 * @author teresa
 *
 */
public class DummyDataGenerator {
	
	static List<Item> dummyItems = new ArrayList<>();
	Random random = new Random();
	static int amountGeneratedOrders = 100;
	static int amountGeneratedItems = 50;

	/**
	 * Generates dummy data in a range defined in years.
	 * It uses the arguments from the main method in {@link Runner} class.
	 * It creates both the random {@link Item} as well as {@link Order}
	 * @param lowerBound {@link Integer} the smallest value in range
	 * @param upperBound {@link Integer} the highest value in range
	 * @return {@link List} random {@link Order} generated.
	 */
	public static List<Order> generateDummyData(int lowerBound, int upperBound){
		List<Order> dummyOrders = new ArrayList<>();
		generateDummyItems(lowerBound,upperBound);
		dummyOrders = generateDummyOrders(lowerBound,upperBound);
		return dummyOrders;
	}

	/**
	 * Generates dummy orders.
	 * @param lower {@link Integer} the lowest year value
	 * @param upper {@link Integer} the highest year value
	 * @return {@link List} of dummy {@link Order}.
	 */
	private static List<Order> generateDummyOrders(int lower, int upper) {
		List<Order> orders = new ArrayList<>();
		Order order = null;
		List<Item> items = new ArrayList<>();
		String name = "customer name";
		String contact = "customer contact";
		String address = "customer address";		
		
		for(int i =0; i < amountGeneratedOrders; i++){	
			LocalDateTime creation = RandomDateGenerator.getRandomDateBetween(2014, 2016);
			items = createRandomPurchasedItems();
			order = new Order(name, contact, address, items, creation);
			orders.add(order);
		}
		
		return orders;
	}

	/**
	 * Randomly creates the purchased items of an {@link Order} 
	 * @return {@link List} of items.
	 */
	private static List<Item> createRandomPurchasedItems() {
		List<Item> basket = new ArrayList<>();
		ThreadLocalRandom rand = ThreadLocalRandom.current();
		int shopped = rand.nextInt(1, dummyItems.size());
		
		for(int i=0; i <= shopped; i++){
			basket.add(dummyItems.get(rand.nextInt(0, dummyItems.size())));
		}
		
		return basket;
	}

	/**
	 * Generates dummy items using different creation dates.
	 * The creation dates are generated by {@link RandomDateGenerator}.
	 * @param lower {@link Integer} the lowest year value
	 * @param upper {@link Integer} the highest year value
	 */
	private static void generateDummyItems(int lower, int upper) {
		Item item = null;
		Product product;
		BigDecimal cost = new BigDecimal(100);
		BigDecimal shippingFee= new BigDecimal(30);
		BigDecimal taxAmount = new BigDecimal(0.30);
		float weight = 0.90f;
		String category = "category";
		String name = "name";
		
		for(int i=0; i < amountGeneratedItems; i++){
			LocalDateTime creation = RandomDateGenerator.getRandomDateBetween(lower, upper);
			product = new Product(name, category, weight, creation);
			item = new Item(cost, shippingFee, taxAmount, product);
			dummyItems.add(item);
		}
	}

	/**
	 * Gets the value of generated orders
	 * @return {@link Integer} generated orders
	 */
	public static int getAmountGeneratedOrders() {
		return amountGeneratedOrders;
	}

	/**
	 * Defines the value of  orders to be generated
	 * @param amountGeneratedOrders {@link Integer} value of generated orders
	 */
	public static void setAmountGeneratedOrders(int amountGeneratedOrders) {
		DummyDataGenerator.amountGeneratedOrders = amountGeneratedOrders;
	}

	/**
	 * Gets the amount of items generated
	 * @return {@link Integer} amount of items generated
	 */
	public static int getAmountGeneratedItems() {
		return amountGeneratedItems;
	}

	/**
	 * Defines the amount of items to be generated
	 * @param amountGeneratedItems {@link Integer} value
	 */
	public static void setAmountGeneratedItems(int amountGeneratedItems) {
		DummyDataGenerator.amountGeneratedItems = amountGeneratedItems;
	}
	
	

}
